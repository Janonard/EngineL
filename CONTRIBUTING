# Anmerkung für Beiträge

Sie können auf vielfälltige Weise zu EngineL beitragen und kreative Ideen und Vorschläge sind sehr erwünscht, sogar benötigt. Dennoch gibt es ein paar Regeln, die Sie beachten müssen, damit die Verarbeitung Ihres Beitrages möglichst flüssig und problemlos ablaufen kann.

## Allgemeine Verhaltensregeln

Egal, was Sie machen, halten Sie sich immer an den [Code of Conduct des Projektes](CODE_OF_CONDUCT.md). Tun Sie dies nicht, können Ihre Beiträge nicht bearbeitet werden und im schlimmsten Fall können Sie auch wegen Ihrem Verhalten gebannt werden. Sollte Ihnen eine Person auffallen, die gegen diese Vereinbarung verstößt, melden Sie diese bitte bei janonard[a]protonmail.com.

## Umgangssprache

EngineL ist ein Projekt, das derzeit rein auf den deutschsprachigen Markt ausgerichtet ist, dementsprechend sollten auch Begleittexte (wie dieser) auf Deutsch geschrieben sein. Da die Softwarebranche allerdings sehr global ist, ist die eigentliche Umgangssprache Englisch und auch Quelltexte von Bibliotheken werden auf Englisch verfasst.

Aus diesem Grund muss bei diesem Projekt ein Dualismus aus Deutsch und Englisch gelten: Quelltexte (also Klassen-, Methoden- und Eigenschaftsnamen etc.), sowie Kommentare im Quelltext und Git-Commit-Einträge sind auf Englisch zu verfassen, alles andere darf und soll auf Deutsch geschehen. Pull-Requests, die dieser Vorgabe nicht folgen, müssen überarbeitet werden, bevor Sie aufgenommen werden.

## Fehlerberichte (Bugreports)

Ist Ihnen ein Fehler in EngineL aufgefallen? Erstellen Sie bitten ein [Issue](https://github.com/Janonard/EngineL/issues) dazu! Geben Sie bitte dazu an, wie man den Bug reproduzieren kann (am besten als automatisierter pytest-Test), welches Verhalten Sie erwartet haben und welches Verhalten stattdessen aufgetreten ist.

Wenn Sie schon zusätzliches Wissen über den Bug gewinnen konnten, zum Beispiel, wo genau im Quelltext der Fehler ist oder wie man ihn beheben kann, geben Sie auch Dieses bitte an; Wenn Sie den Bug sogar schon selbst gefixt haben, können Sie auch schon einen [Pull-Request](https://github.com/Janonard/EngineL/pulls) erstellen, damit der Fehler möglichst schnell behoben wird.

## Vorschläge für neue Features (Featurerequest)

Sie haben eine neue Idee für ein Feature? Sie finden vorhandene Lösungen zu kompliziert? Sie wollen ein besonderes Spiel umsetzen und brauchen dafür einen speziellen technischen Untergrund? Schlagen Sie ihr Feature als [Issue](https://github.com/Janonard/EngineL/issues) vor!

Erklären Sie so genau wie möglich, was Sie gerne haben möchten, wieso dieses Feature umgesetzt werden soll und was dafür benötigt wird. Wenn ihr Vorschlag nur eine grobe Idee oder ein Problem ist, kann dieser in der Diskussion weiter verfeinert und ausgebaut werden.

Wurde Ihr Vorschlag angenommen, wird eine Quest ausgeschrieben, die sowohl Sie als auch andere erfüllen können.

## Quests

Die Quests für EngineL können Sie sich in etwa so vorstellen wie Quests in einem Computerspiel: Konkrete Arbeitsaufträge, die Sie ohne weiteres zutun direkt abarbeiten können.

Bei einer Quest ist immer angegeben, was genau Sie machen sollen und wie Sie am Besten vorgehen können. Wenn zum Beispiel in einer Klasse eine neue Methode gebraucht wird, steht in der Quest genau drin, was diese Methode tun soll.

Quests bieten Ihnen auch eine gute Möglichkeit in das Projekt einzusteigen, da zu jeder Änderung und jedem neuen Feature eine Quest erstellt wird, Sie nicht unbedingt vollständige Kenntniss des Quelltextes benötigen und genau vorgegeben ist, was Sie tun müssen. Nehmen Sie sich ruhig die Zeit, die Sie brauchen und wenn eine Aufgabe für Sie zu schwierig ist, können Sie diese auch wieder abgeben oder mit Anderen zusammen bearbeiten.

Ein paar Dinge gibt es allerdings bei der Bearbeitung von Quests zu beachten:

* Wie schon oben angegeben, muss alles, was sich in einer Quelltextdatei befindet, auf Englisch geschrieben werden, um keine Stilbrüche mit dem Rest des Quellcodes und verwendeten APIs zu erhalten.

* Bitte halten Sie sich an den offiziellen [Python-Stil](https://www.python.org/dev/peps/pep-0008/) und nutzen Sie zur Kontrolle [pylint](https://www.pylint.org), welches über die Installationsanleitung mit installiert wird. Wenn pylint nichts an Ihrem Stil auszusetzten hat, sind Sie auf der sicheren Seite, ansonsten müssen Sie ihren Code anpassen.

* Erstellen Sie zu jedem Bug und jedem Feature [pytest](https://docs.pytest.org/en/latest/)-Tests, die zeigen, dass der Bug gefixt ist bzw. das Feature funktioniert. Dadurch erhöht sich die Qualität ihrer Änderung und die von Anderen in der Zukunft.

Weitere Informationen zum Aufbau und zur Arbeitsweise von und mit EngineL finden Sie in der [Dokumentation](https://janonard.github.io/EngineL-docs/).